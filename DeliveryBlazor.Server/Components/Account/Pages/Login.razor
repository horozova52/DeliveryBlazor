@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using DeliveryBlazor.Server.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DeliveryBlazor.Core.Entities;

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h2 class="login-title">Welcome Back</h2>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="input-group mb-3">
                <span class="input-icon"><i class="fas fa-envelope"></i></span>
                <InputText @bind-Value="Input.Email" class="form-control input-field" placeholder="Email Address" />
            </div>

            <div class="input-group mb-3">
                <span class="input-icon"><i class="fas fa-lock"></i></span>
                <InputText @bind-Value="Input.Password" type="password" class="form-control input-field" placeholder="Password" />
            </div>

            <div class="remember-me mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" />
                <label>Remember me</label>
            </div>

            <button type="submit" class="btn btn-primary btn-login">Log in</button>

            <div class="links">
                <a href="Account/ForgotPassword">Forgot your password?</a>
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
