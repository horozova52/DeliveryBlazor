@using DeliveryBlazor.Client.Services.UserClientService
@using DeliveryBlazor.Shared.DataTransferObjects
@using Microsoft.AspNetCore.Identity
@using DeliveryBlazor.Core.Entities
@using MudBlazor

@inject IDialogService dialogService
@inject IUserServices userService

<MudDialog>
    <DialogContent>
        <EditForm Model="user" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
             @*    <MudItem xs="12">
                    <MudTextField @bind-Value="user.FirstName" For="@(() => user.FirstName)" Label="First Name" Variant="Variant.Outlined" />
                </MudItem> *@
                <MudItem xs="12">
                    <MudTextField @bind-Value="user.LastName" For="@(() => user.LastName)" Label="Last Name" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="user.Email" For="@(() => user.Email)" Label="Email" Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="()=>Save()" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    public ApplicationUser user = new ApplicationUser();

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[AddEditUserComponent] OnInitializedAsync called with Id = {Id}");

        if (!string.IsNullOrEmpty(Id))
        {
            user = await userService.GetUserById(Id);
            Console.WriteLine($"[DEBUG] Fetched user: {user.FirstName}, {user.LastName}, {user.Email}");



            if (user == null)
            {
                Console.WriteLine($"[AddEditUserComponent] User with Id={Id} not found. Creating empty user.");
                user = new ApplicationUser
                    {
                       /// FirstName = string.Empty,
                        LastName = string.Empty,
                        Email = string.Empty
                    };
            }
            else
            {
                Console.WriteLine($"[AddEditUserComponent] User found with Id={user.Id}");
               /// Console.WriteLine($"  FirstName: {user.FirstName}");
                Console.WriteLine($"  LastName: {user.LastName}");
                Console.WriteLine($"  Email: {user.Email}");
            }
        }
        else
        {
            Console.WriteLine("[AddEditUserComponent] Id is null or empty => Adding new user mode.");
            user = new ApplicationUser
                {
                  ///  FirstName = string.Empty,
                    LastName = string.Empty,
                    Email = string.Empty
                };
        }
    }

    private async Task Save()
    {
        try
        {
            Console.WriteLine($"[AddEditUserComponent] Save called. Id={(string.IsNullOrEmpty(Id) ? "NEW" : Id)}");
           /// Console.WriteLine($"  FirstName: {user.FirstName}");
            Console.WriteLine($"  LastName:  {user.LastName}");
            Console.WriteLine($"  Email:     {user.Email}");

            if (!string.IsNullOrEmpty(Id))
            {
                await userService.UpdateUserAsync(Id, user);
            }
            else
            {
                await userService.CreateUserAndClientAsync(user);
            }

            Callback?.Invoke();
            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddEditUserComponent] Error on save: {ex.Message}");
        }
    }
}
