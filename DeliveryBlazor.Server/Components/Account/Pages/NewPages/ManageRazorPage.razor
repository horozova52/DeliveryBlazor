@page "/managerazor"

@using DeliveryBlazor.Client.Services.UserClientService
@using DeliveryBlazor.Shared.DataTransferObjects
@using Microsoft.AspNetCore.Identity;
@using DeliveryBlazor.Core.Entities
@using MudBlazor
@using DeliveryBlazor.Server.Components.Account.Pages.NewPages

@rendermode InteractiveServer

@inject IDialogService dialogService
@inject IUserServices userService


<MudDialogProvider />

@if (isLoading)
{
    <div class="progress-container">
        <div class="progress"></div>
    </div>
}
else
{
    <div class="container">
            <div style="text-align: right; margin-bottom: 20px;">
            <button class="btn-primary" @onclick="OpenAddUserDialog">Adauga Utilizator</button>
        </div>

        <h2>All Users</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Acțiuni</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Email</td>
                        <td class="actions">
                            <button class="btn-success" @onclick="@(() => OpenEditUserDialog(user.Id))">Editeaza</button>
                            <button class="btn-danger" @onclick="@(() => Delete(user.Id))">Șterge</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}

@code {
    private bool isLoading = true;
    private List<ApplicationUser> users = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {


        var result = await userService.GetAllApplicationUsersAsync();
        if (result != null)
        {
         users = result.ToList();
        }
        else
        {
        users = new List<ApplicationUser>();
        }

        StateHasChanged();
    }


    private void OpenAddUserDialog()
    {
        var parameters = new DialogParameters
    {
        { "Callback", new Func<Task>(OnInitializedAsync) }
    };

        dialogService.Show<AddEditUserComponent>("Add User", parameters);
    }

    private void OpenEditUserDialog(string id)
    {
        var parameters = new DialogParameters
    {
        { "Id", id }, 
        { "Callback", new Func<Task>(OnInitializedAsync) }
    };

        dialogService.Show<AddEditUserComponent>("Edit User", parameters);
    }


    private async Task Delete(string id)
    {
        await userService.DeleteUser(id);
        await OnInitializedAsync();
    }
}
